{"version":3,"sources":["components/Todo/Todo.jsx","components/TodoListInput/TodoListInput.jsx","components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["Todo","todo","selectUser","selectedUserId","className","completed","type","readOnly","title","userId","onClick","TodoListInput","handleChange","searchValue","selectValue","name","value","onChange","TodoList","state","search","visibleTodos","filter","all","active","event","setState","target","this","props","todos","renderedTodos","includes","map","key","id","React","PureComponent","request","url","fetch","then","response","ok","Error","status","statusText","json","result","data","a","getUser","user","CurrentUser","updateUser","newUserId","newUser","deselectUser","email","phone","App","todosError","getTodos","catch","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2c6ec26.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, selectUser, selectedUserId }) => (\n  // eslint-disable-next-line\n  <li className={`TodoList__item TodoList__item--${todo.completed ? 'checked' : 'unchecked'}`}>\n    <label>\n      <input type=\"checkbox\" readOnly />\n      <p>{todo.title}</p>\n    </label>\n\n    <button\n      // eslint-disable-next-line\n      className={`TodoList__user-button ${selectedUserId === todo.userId ? 'TodoList__user-button--selected' : ''} button`}\n      type=\"button\"\n      onClick={() => selectUser(todo.userId)}\n    >\n      {`User: #${todo.userId}`}\n    </button>\n  </li>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    completed: PropTypes.bool,\n  }).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoListInput = ({\n  handleChange,\n  searchValue,\n  selectValue,\n}) => (\n  <>\n    <label>\n      <span>\n        {`Search todo: `}\n      </span>\n      <input\n        name=\"search\"\n        type=\"text\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n    </label>\n\n    <label>\n      <select\n        name=\"visibleTodos\"\n        onChange={handleChange}\n        value={selectValue}\n      >\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n    </label>\n  </>\n);\n\nTodoListInput.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  searchValue: PropTypes.string.isRequired,\n  selectValue: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo/Todo';\nimport { TodoListInput } from '../TodoListInput/TodoListInput';\n\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    visibleTodos: 'all',\n  }\n\n  filter = {\n    all: () => true,\n    completed: todo => todo.completed,\n    active: todo => !todo.completed,\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  render() {\n    const { todos, selectedUserId, selectUser } = this.props;\n    const { search, visibleTodos } = this.state;\n    const renderedTodos = todos.filter(todo => (\n      todo.title.includes(search) && this.filter[visibleTodos](todo)\n    ));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <TodoListInput\n          handleChange={this.handleChange}\n          searchValue={search}\n          selectValue={visibleTodos}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              renderedTodos.map(todo => (\n                <li\n                  key={todo.id}\n                >\n                  <Todo\n                    todo={todo}\n                    selectUser={selectUser}\n                    selectedUserId={selectedUserId}\n                  />\n                </li>\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number,\n      title: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n      createdAt: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n\nexport async function getTodos() {\n  const todos = await request(`/todos`);\n\n  return todos.filter(todo => todo.userId && todo.title);\n}\n\nexport async function getUser(userId) {\n  const user = await request(`/users/${userId}`);\n\n  return user;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  componentDidUpdate() {\n    const { userId } = this.props;\n\n    this.updateUser(userId);\n  }\n\n  async updateUser(newUserId) {\n    if (this.state.user.id === newUserId) {\n      return;\n    }\n\n    const newUser = await getUser(newUserId);\n\n    this.setState({ user: newUser });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { deselectUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={deselectUser}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  deselectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    todosError: false,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      })\n      .catch(() => this.setState({\n        todosError: true,\n      }));\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  deselectUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, todosError } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todosError\n            ? (\n              <h2>\n                {`Can't load todos, please reload the page `}\n              </h2>\n            )\n            : (\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n              />\n            )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                deselectUser={this.deselectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}